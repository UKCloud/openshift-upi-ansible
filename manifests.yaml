- hosts: localhost

  tasks:
  - name: Set pull secret var
    set_fact:
      pullSecret: "{{ lookup('file', 'pull-secret.txt') | from_json | to_json }}"

  - name: Set pull secret var
    set_fact:
      sshKey: "{{ lookup('file', 'pubkey.pem') }}"

  - name: Create install config
    template:
      src: install-config.j2
      dest: install-config.yaml

  - name: Backup install config
    copy:
      src: install-config.yaml
      dest: install-config.yaml.bk

  - name: Generate manifests
    command: openshift-install create manifests --dir=./

  - name: Remove control plane manifests
    file:
      path: "{{ item }}"
      state: absent
    with_fileglob:
    - "openshift/99_openshift-cluster-api_master-machines-*.yaml"
     
  - name: Set controlplane nodes unschedulable in manifests
    replace:
      path: manifests/cluster-scheduler-02-config.yml
      regexp: '^\s{2}mastersSchedulable: true$'
      replace: '  mastersSchedulable: False'

  - name: Include vars from worker machineset to obtain cluster ID (not available from metadata.json cos it aint been generated yet)
    include_vars:
      file: openshift/99_openshift-cluster-api_worker-machineset-0.yaml
      name: machineSetData      

  - name: Set clusterId as a temporary early version of InfraID var
    set_fact:
      clusterID: "{{ machineSetData.metadata.labels['machine.openshift.io/cluster-api-cluster'] }}"

- import_playbook: net2-manifests.yaml
  when: net2 | default(false) | bool


- hosts: localhost
  vars:
    infraMachineSetScale: 2

  tasks:
  - name: Generate a infra MachineSet from template
    template:
      src: infra-machineset.j2
      dest: openshift/99_openshift-cluster-api_infra-machineset-0.yaml

  - name: Create infra MachineConfigPool manifest
    copy:
      dest: "manifests/infra-machineconfigpool.yaml"
      content: |
        apiVersion: machineconfiguration.openshift.io/v1
        kind: MachineConfigPool
        metadata:
          name: infra
        spec:
          machineConfigSelector:
            matchExpressions:
              - { key: machineconfiguration.openshift.io/role, operator: In, values: [ worker, infra ] }
          nodeSelector:
            matchLabels:
              node-role.kubernetes.io/infra: ""

  - name: Get userData from worker user-data-secret file
    set_fact:
      userData: "{{ lookup('file', 'openshift/99_openshift-cluster-api_worker-user-data-secret.yaml') | from_yaml | json_query(userDataQuery) | b64decode }}"
    vars:
      userDataQuery: "data.userData"

  - name: Retrieve and modify ignition endpoint
    set_fact:
      ignitionEndpoint: "{{ userData | to_json | from_json | json_query(ignitionEndpointQuery) | replace('worker','infra') }}"
    vars:
      ignitionEndpointQuery: "ignition.config.merge[0].source"

  - name: Insert changed ignition endpoint
    set_fact:
      infraUserData: '{{ userData | combine({"ignition": {"config": {"merge":[{"source": ignitionEndpoint, "verification":{}}]}}}, recursive=True) }}'

  - name: Create infra-user-data secret file
    copy:
      dest: "openshift/99_openshift-cluster-api_infra-user-data-secret.yaml"
      content: |
        apiVersion: v1
        metadata:
          name: infra-user-data
          namespace: openshift-machine-api
        data:
          disableTemplating: dHJ1ZQo=
          userData: "{{ infraUserData | to_json | b64encode }}"
        kind: Secret
        type: Opaque
  
  - name: Set worker server groups
    lineinfile:
      path: openshift/99_openshift-cluster-api_worker-machineset-0.yaml
      insertafter: '^\s{10}image.*$'
      line: '          serverGroupID: {{ workerDefault.id }}'

  - name: Add label for default node selector
    replace:
      path: openshift/99_openshift-cluster-api_worker-machineset-0.yaml
      regexp: '^\s{6}metadata:.*'
      replace: '      metadata:\n        labels:\n          node-role.kubernetes.io/app: ""'      

  - name: Set worker scale
    replace:
      path: openshift/99_openshift-cluster-api_worker-machineset-0.yaml
      regexp: '^\s{2}replicas: 0$'
      replace: '  replicas: {{ initialWorkerCount }}'

  - name: Find/replace MachineSet Name
    replace:
        path: openshift/99_openshift-cluster-api_worker-machineset-0.yaml
        regexp: "{{ clusterID }}-worker-0"
        replace: "{{ ( custID + '-' + workerFlavor ) | replace('.','-') | replace('ocp-','') | replace('app-','') }}-worker"

  - name: Find/replace serverMetadata Name
    replace:
        path: openshift/99_openshift-cluster-api_worker-machineset-0.yaml
        regexp: "Name: {{ clusterID }}-worker"
        replace: "Name: {{ ( custID + '-' + workerFlavor ) | replace('.','-') | replace('ocp-','') | replace('app-','') }}-worker"

  - name: Generate ignition configs
    command: openshift-install create ignition-configs --dir=./

  - name: Register actual infra ID variable
    command: jq -r .infraID metadata.json
    register: infrastructureID

  - name: Run bootstrap.py
    shell: export INFRA_ID=$(jq -r .infraID metadata.json) ; python bootstrap.py

  - name: Upload bootstrap image
    command:  openstack image create --disk-format=raw --container-format=bare --file bootstrap.ign bootstrap

  - name: Register bootstrap image path
    command: openstack image show bootstrap -c file -f value
    register: filePath

  - name: Register glance public endpoint
    shell: openstack catalog show image -c endpoints | grep public | awk '{print $4}'
    register: glanceUrl

  - name: Register OpenStack token
    command: openstack token issue -c id -f value
    register: token

  - name: Set full bootstrap image URL
    set_fact:
      bootstrapSource: "{{ glanceUrl.stdout }}{{ filePath.stdout }}"

  - name: Create install config
    template:
      src: bootstrap-ignition.j2
      dest: "{{ infrastructureID.stdout }}-bootstrap-ignition.json"

  - name: Run controlplane.sh
    shell: export INFRA_ID=$(jq -r .infraID metadata.json) ; bash controlplane.sh
